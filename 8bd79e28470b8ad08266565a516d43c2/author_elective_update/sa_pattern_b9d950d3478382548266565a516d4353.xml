<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sa_pattern">
    <sa_pattern action="DELETE">
        <active>true</active>
        <ci_type>cmdb_ci_win_server</ci_type>
        <cpattern_type>3</cpattern_type>
        <description/>
        <directory>false</directory>
        <enforce_proc_classy>false</enforce_proc_classy>
        <invoke_per_account>false</invoke_per_account>
        <metadata_id>670e55a4db702200c06776231f961942</metadata_id>
        <name>Windows OS - Servers Ondrej</name>
        <ndl>pattern {&#13;
	metadata {&#13;
		id = "670e55a4db702200c06776231f961942"&#13;
		name = "Windows OS - Servers Ondrej"&#13;
		description = ""&#13;
		citype = "cmdb_ci_win_server"&#13;
	}&#13;
	identification {&#13;
		name = "discovery"&#13;
		entry_point {type = "*"}&#13;
		find_process_strategy {strategy = NONE}&#13;
		step {&#13;
			name = "Get Data Set By Windows - Classify"&#13;
			ref {refid = "656886d6dbc12200c06776231f961930"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Hardware Information"&#13;
			ref {refid = "2ba886d6dbc12200c06776231f96194b"}&#13;
		}&#13;
		step {&#13;
			name = "Insert chassis_type to cmdb_ci_win_server"&#13;
			if {&#13;
				condition = all {&#13;
					is_not_empty {get_attr {"Win32_SystemEnclosure[1].ChassisTypes"}}&#13;
					not_contains {&#13;
						get_attr {"Win32_SystemEnclosure[1].ChassisTypes"}&#13;
						"null"&#13;
					}&#13;
					not_contains {&#13;
						get_attr {"Win32_SystemEnclosure[1].ChassisTypes"}&#13;
						"None"&#13;
					}&#13;
				}&#13;
				on_true = transform {&#13;
					src_table_name = "cmdb_ci_win_server"&#13;
					target_table_name = "cmdb_ci_win_server"&#13;
					operation {set_field {&#13;
							field_name = "chassis_type"&#13;
							value = eval {"javascript:var rtrn = \"\";
    var chassisType = ${Win32_SystemEnclosure[1].ChassisTypes};
    var types = [\"Other\", \"Unknown\", \"Desktop\", \"Low Profile Desktop\", \"Pizza Box\", 
                     \"Mini Tower\", \"Tower\", \"Portable\", \"Laptop\", \"Notebook\", \"Hand Held\", 
                     \"Docking Station\", \"All in One\", \"Sub Notebook\", \"Space-Saving\", 
                     \"Lunch Box\", \"Main System Chassis\", \"Expansion Chassis\", \"SubChassis\", 
                     \"Bus Expansion Chassis\", \"Peripheral Chassis\", \"Storage Chassis\", 
                     \"Rack Mount Chassis\", \"Sealed-Case PC\"];
    rtrn = types[chassisType-1] || null;
"}&#13;
						}}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Trim cmdb_serial_number Table"&#13;
			transform {&#13;
				src_table_name = "cmdb_serial_number"&#13;
				target_table_name = "cmdb_serial_number"&#13;
				operation {set_field {&#13;
						field_name = "serial_number"&#13;
						value = eval {"javascript: var rtn = \"\";
var sn = \"\";

if (${cmdb_serial_number} &amp;&amp; ${cmdb_serial_number[].serial_number})
	sn  = ${cmdb_serial_number[].serial_number}.trim();
rtn = sn;"}&#13;
					}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Insert serial number to cmdb_ci_win_server"&#13;
			comment = "Set serial number to main CI"&#13;
			transform {&#13;
				src_table_name = "cmdb_ci_win_server"&#13;
				target_table_name = "cmdb_ci_win_server"&#13;
				operation {set_field {&#13;
						field_name = "serial_number"&#13;
						value = get_attr {"cmdb_serial_number[1].serial_number"}&#13;
					}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference between serial number to windows server"&#13;
			comment = ""&#13;
			relation_reference {&#13;
				table1_name = "cmdb_serial_number"&#13;
				table2_name = "cmdb_ci_win_server"&#13;
				result_table_name = "serial_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				ref_direction = parentToChild&#13;
				ref_field_name = "non_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - OS Information"&#13;
			ref {refid = "554ec5589fbc32001d753758442e70ba"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - CPU And Memory"&#13;
			ref {refid = "189e4d589fbc32001d753758442e7057"}&#13;
		}&#13;
		step {&#13;
			name = "Insert System, OS and CPU data to cmdb_ci_win_server"&#13;
			comment = "Add System, OS and CPU address width to main CI
cpu_core_count calculated using Win32_Processor.NumberOfCores
cpu_core_thread is calculated using Win32_Processor.NumberOfLogicalProcessors &amp; Win32_Processor.NumberOfCores
fqnd calculated using computer_system.primaryHostname &amp; TcpIpParameters.Domain
cpu_count calculated using Win32_Processor"&#13;
			transform {&#13;
				src_table_name = "cmdb_ci_win_server"&#13;
				target_table_name = "cmdb_ci_win_server"&#13;
				operation {&#13;
					set_field {&#13;
						field_name = "os_version"&#13;
						value = get_attr {"osInfo[1].Version"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os_service_pack"&#13;
						value = get_attr {"osInfo[1].CSDVersion"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "manufacturer"&#13;
						value = get_attr {"computerInfo[1].Manufacturer"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "model_id"&#13;
						value = get_attr {"computerInfo[1].Model"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "short_description"&#13;
						value = get_attr {"osInfo[1].Description"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os_address_width"&#13;
						value = get_attr {"osAddressWidth[1].AddressWidth"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "assigned_to"&#13;
						value = get_attr {"computerInfo[1].UserName"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_name"&#13;
						value = get_attr {"Win32_Processor[1].Name"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_speed"&#13;
						value = get_attr {"Win32_Processor[1].MaxClockSpeed"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_type"&#13;
						value = get_attr {"Win32_Processor[1].Manufacturer"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_core_count"&#13;
						value = eval {"javascript:var rtrn = '';rtrn = (${Win32_Processor.NumberOfCores})&gt;0?${Win32_Processor.NumberOfCores}:\"\";"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_core_thread"&#13;
						value = eval {"javascript:var rtrn = 0;if (JSUtil.notNil(${Win32_Processor.NumberOfCores}) &amp;&amp; (${Win32_Processor.NumberOfCores} &gt; 0)){ rtrn = (${Win32_Processor.NumberOfLogicalProcessors})/(${Win32_Processor.NumberOfCores});}"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "ip_address"&#13;
						value = get_attr {"computer_system.managementIP"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "host_name"&#13;
						value = get_attr {"newHostname"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "fqdn"&#13;
						value = get_attr {"fqdn"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os_domain"&#13;
						value = get_attr {"domainName"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "name"&#13;
						value = get_attr {"formattedHostname"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_count"&#13;
						value = eval {"javascript:var rtrn = '';var processorsTable = ${Win32_Processor};rtrn = (processorsTable)?processorsTable.size():\"\";"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os"&#13;
						value = get_attr {"computer_system.osName"}&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Insert ram to cmdb_ci_win_server"&#13;
			comment = "Sum all memory modules to calculate total RAM"&#13;
			if {&#13;
				condition = is_not_empty {get_attr {"Win32_PhysicalMemory[*].Capacity"}}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].ram"&#13;
					concat {eval {"javascript:
var rtrn = '';
var totalRam = 0;
var modulesCapacities = ${Win32_PhysicalMemory[*].Capacity};
 for (var i=0; i &lt; modulesCapacities.size(); i++) {
   totalRam += modulesCapacities.get(i) / (1048576);
 }
rtrn = totalRam;
"}}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_memory_module and cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_memory_module"&#13;
				result_table_name = "memory_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - ARP and NDP Tables"&#13;
			ref {refid = "b8abaeb41b205910a63bdc61ab4bcb14"}&#13;
		}&#13;
		step {&#13;
			name = "Reference between discovery_net_arp_table to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "discovery_net_arp_table"&#13;
				table2_name = "cmdb_ci_win_server"&#13;
				result_table_name = "arp_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				ref_direction = parentToChild&#13;
				ref_field_name = "non_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Printers"&#13;
			ref {refid = "4ff41edadbc12200c06776231f9619dd"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Cluster"&#13;
			ref {refid = "c03a461adbc12200c06776231f961900"}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_win_cluster_node to cmdb_ci_win_server"&#13;
			comment = "Match each node to the main CI by name"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"isNode"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"shouldRunClusterOnOsType"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = relation_reference {&#13;
					table1_name = "cmdb_ci_win_cluster_node"&#13;
					table2_name = "cmdb_ci_win_server"&#13;
					result_table_name = "cluster_node_win_server"&#13;
					unmatched_lines = remove&#13;
					condition = any {&#13;
						eq {&#13;
							get_attr {"cmdb_ci_win_cluster_node[].name"}&#13;
							get_attr {"cmdb_ci_win_server[].host_name"}&#13;
						}&#13;
						eq {&#13;
							get_attr {"cmdb_ci_win_cluster_node[].name"}&#13;
							get_attr {"cmdb_ci_win_server[].name"}&#13;
						}&#13;
					}&#13;
					relation_type = "Hosted on::Hosts"&#13;
					ref_direction = parentToChild&#13;
					ref_field_name = "server"&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Relation between cmdb_ci_win_cluster to cmdb_ci_win_server"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"isNode"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"shouldRunClusterOnOsType"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = relation_reference {&#13;
					table1_name = "cmdb_ci_win_cluster"&#13;
					table2_name = "cmdb_ci_win_server"&#13;
					result_table_name = "cluster_win_server"&#13;
					unmatched_lines = remove&#13;
					condition = is_not_empty {get_attr {"cmdb_ci_win_cluster[].PartComponent"}}&#13;
					relation_type = "Hosted on::Hosts"&#13;
					ref_direction = parentToChild&#13;
					ref_field_name = ""&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Network"&#13;
			ref {refid = "7dc49adadbc12200c06776231f96197d"}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between dscy_router_interface to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "dscy_router_interface"&#13;
				result_table_name = "router_interface_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Uses::Used by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between dscy_route_interface to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "dscy_route_interface"&#13;
				result_table_name = "route_interface_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Uses::Used by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between dscy_route_next_hop to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "dscy_route_next_hop"&#13;
				result_table_name = "gateway_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Uses::Used by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_network_adapter to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_network_adapter"&#13;
				result_table_name = "network_adapter_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Relation between cmdb_ci_ip_address to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_ip_address"&#13;
				result_table_name = "ip_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = contains {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = parentToChild&#13;
				ref_field_name = ""&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Set server's default gateway"&#13;
			comment = "Find the first NIC with default route, and set this route in the main CI"&#13;
			transform {&#13;
				src_table_name = "cmdb_ci_win_server"&#13;
				target_table_name = "cmdb_ci_win_server"&#13;
				operation {set_field {&#13;
						field_name = "default_gateway"&#13;
						value = concat {eval {"javascript:
var rtrn = '';
var networkAdaptersTable = ${ValidNetworkAdapters};
var networkAdapter;
var networkAdapterGateway;
if(networkAdaptersTable){
for(var i = 0; i &lt; networkAdaptersTable.size(); i++)
{
networkAdapter = networkAdaptersTable.get(i);
networkAdapterGateway = networkAdapter.get(\"DefaultIPGateway\");
if(networkAdapterGateway)
{
rtrn = networkAdapterGateway;
break;
}
}
}
"}}&#13;
					}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "DNS"&#13;
			ref {refid = "ede27fe5db652200868a7c841f961984"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Storage"&#13;
			ref {refid = "87e5921edbc12200c06776231f96190a"}&#13;
		}&#13;
		step {&#13;
			name = "Insert total disk space of the server"&#13;
			comment = "Sum all disks size for total disk space"&#13;
			set_attr {&#13;
				"cmdb_ci_win_server[*].disk_space"&#13;
				concat {eval {"javascript:
var rtrn = '';
var disksSizeColumn = ${PhysicalDisks[*].Size};
//disksSize = disksSize + \"\";
//disksSize = JSON.parse(disksSize);
//var total = 0;
var totalDiskSize = 0;
//if (disksSize instanceof Array) {
 //for (var i=0; i &lt; disksSize.length; i++) {
for (var i=0; i &lt; disksSizeColumn.size(); i++) {
   //total += disksSize[i];
totalDiskSize += disksSizeColumn.get(i) / (1073741824);
 }
//}
//rtrn = (total / (1073741824)) | 0;
//rtrn = (totalDiskSize / (1073741824)) | 0;
rtrn = totalDiskSize;
"}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_disk to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_disk"&#13;
				result_table_name = "disk_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_storage_device to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_storage_device"&#13;
				result_table_name = "storage_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_fc_disk to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_fc_disk"&#13;
				result_table_name = "fc_disk_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_iscsi_disk to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_iscsi_disk"&#13;
				result_table_name = "iscsi_disk_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_disk_partition to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_disk_partition"&#13;
				result_table_name = "partition_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_storage_hba and cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_storage_hba"&#13;
				result_table_name = "hba_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_fc_port to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_fc_port"&#13;
				result_table_name = "fc_port_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_nas_file_system to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_nas_file_system"&#13;
				result_table_name = "nas_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_file_system to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_file_system"&#13;
				result_table_name = "file_system_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Insert data to cmdb_ci_hyper_v_server"&#13;
			comment = "NameForCluster used for matching hyper-v cluster"&#13;
			if {&#13;
				condition = eq {&#13;
					get_attr {"isHyperV"}&#13;
					"true"&#13;
				}&#13;
				on_true = transform {&#13;
					src_table_name = "cmdb_ci_win_server"&#13;
					target_table_name = "cmdb_ci_hyper_v_server"&#13;
					operation {&#13;
						set_field {&#13;
							field_name = "name"&#13;
							value = concat {&#13;
								get_attr {"cmdb_ci_win_server[].name"}&#13;
								"@Hyper-V Server"&#13;
							}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os_service_pack"&#13;
							value = get_attr {"cmdb_ci_win_server[].os_service_pack"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "manufacturer"&#13;
							value = get_attr {"cmdb_ci_win_server[].manufacturer"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "model_id"&#13;
							value = get_attr {"cmdb_ci_win_server[].model_id"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "short_description"&#13;
							value = get_attr {"cmdb_ci_win_server[].short_description"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os_address_width"&#13;
							value = get_attr {"cmdb_ci_win_server[].os_address_width"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os"&#13;
							value = get_attr {"cmdb_ci_win_server[].os"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "host_name"&#13;
							value = get_attr {"cmdb_ci_win_server[].host_name"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "ip_address"&#13;
							value = get_attr {"cmdb_ci_win_server[].ip_address"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "chassis_type"&#13;
							value = get_attr {"cmdb_ci_win_server[].chassis_type"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os_version"&#13;
							value = get_attr {"cmdb_ci_win_server[].os_version"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "assigned_to"&#13;
							value = get_attr {"cmdb_ci_win_server[].assigned_to"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "virtual"&#13;
							value = "true"&#13;
						}&#13;
						set_field {&#13;
							field_name = "NameForCluster"&#13;
							value = get_attr {"cmdb_ci_win_server[1].name"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "serial_number"&#13;
							value = concat {&#13;
								get_attr {"cmdb_ci_win_server[1].serial_number"}&#13;
								"_hyper_v_server"&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Hyper-V"&#13;
			ref {refid = "4386161edbc12200c06776231f961939"}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_hyper_v_server and cmdb_ci_win_server"&#13;
			if {&#13;
				condition = eq {&#13;
					get_attr {"isHyperV"}&#13;
					"true"&#13;
				}&#13;
				on_true = relation_reference {&#13;
					table1_name = "cmdb_ci_hyper_v_server"&#13;
					table2_name = "cmdb_ci_win_server"&#13;
					result_table_name = "hyper_v_win_server"&#13;
					unmatched_lines = remove&#13;
					condition = eq {&#13;
						"1"&#13;
						"1"&#13;
					}&#13;
					relation_type = "Runs on::Runs"&#13;
					ref_direction = parentToChild&#13;
					ref_field_name = "windows_host"&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Cloud"&#13;
			ref {refid = "b65be7cedb093200c12ef9361d9619f3"}&#13;
		}&#13;
		step {&#13;
			name = "If AWS, set AWS object_id on host"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"shouldDiscoverAmazon"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"isEc2"}&#13;
						"true"&#13;
					}&#13;
					is_not_empty {get_attr {"awsData[*].instance_id"}}&#13;
				}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].object_id"&#13;
					get_attr {"awsData[1].instance_id"}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "If Azure, set Azure object_id on host"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"isAzure"}&#13;
						"true"&#13;
					}&#13;
					is_not_empty {get_attr {"uuidSerial"}}&#13;
					eq {&#13;
						get_attr {"shouldDiscoverAzure"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].object_id"&#13;
					get_attr {"uuidSerial"}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "If host discovered by cloud discovery, set it as virtual"&#13;
			if {&#13;
				condition = any {&#13;
					eq {&#13;
						get_attr {"isAzure"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"isEc2"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].virtual"&#13;
					"true"&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
	}&#13;
}&#13;
</ndl>
        <parent/>
        <serverless>false</serverless>
        <source/>
        <sys_class_name>sa_pattern</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-02 11:49:13</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b9d950d3478382548266565a516d4353</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Windows OS - Servers Ondrej</sys_name>
        <sys_overrides/>
        <sys_package display_value="Discovery Patterns for Pipeline" source="8bd79e28470b8ad08266565a516d43c2">8bd79e28470b8ad08266565a516d43c2</sys_package>
        <sys_policy/>
        <sys_replace display_value="Windows OS - Servers">670e55a4db702200c06776231f961942</sys_replace>
        <sys_scope display_value="Discovery Patterns for Pipeline">8bd79e28470b8ad08266565a516d43c2</sys_scope>
        <sys_update_name>sa_pattern_b9d950d3478382548266565a516d4353</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-02 11:53:04</sys_updated_on>
        <version/>
    </sa_pattern>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Discovery Patterns for Pipeline">8bd79e28470b8ad08266565a516d43c2</application>
        <file_path/>
        <instance_id>6a0fceee1bdeb11432182f8dee4bcb35</instance_id>
        <instance_name>dev207001</instance_name>
        <name>sa_pattern_b9d950d3478382548266565a516d4353</name>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sa_pattern"><sa_pattern action="INSERT_OR_UPDATE"><active>true</active><ci_type>cmdb_ci_win_server</ci_type><cpattern_type>3</cpattern_type><description/><directory>false</directory><enforce_proc_classy>false</enforce_proc_classy><invoke_per_account>false</invoke_per_account><metadata_id>670e55a4db702200c06776231f961942</metadata_id><name>Windows OS - Servers Ondrej</name><ndl>pattern {&#13;
	metadata {&#13;
		id = "670e55a4db702200c06776231f961942"&#13;
		name = "Windows OS - Servers Ondrej"&#13;
		description = ""&#13;
		citype = "cmdb_ci_win_server"&#13;
	}&#13;
	identification {&#13;
		name = "discovery"&#13;
		entry_point {type = "*"}&#13;
		find_process_strategy {strategy = NONE}&#13;
		step {&#13;
			name = "Get Data Set By Windows - Classify"&#13;
			ref {refid = "656886d6dbc12200c06776231f961930"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Hardware Information"&#13;
			ref {refid = "2ba886d6dbc12200c06776231f96194b"}&#13;
		}&#13;
		step {&#13;
			name = "Insert chassis_type to cmdb_ci_win_server"&#13;
			if {&#13;
				condition = all {&#13;
					is_not_empty {get_attr {"Win32_SystemEnclosure[1].ChassisTypes"}}&#13;
					not_contains {&#13;
						get_attr {"Win32_SystemEnclosure[1].ChassisTypes"}&#13;
						"null"&#13;
					}&#13;
					not_contains {&#13;
						get_attr {"Win32_SystemEnclosure[1].ChassisTypes"}&#13;
						"None"&#13;
					}&#13;
				}&#13;
				on_true = transform {&#13;
					src_table_name = "cmdb_ci_win_server"&#13;
					target_table_name = "cmdb_ci_win_server"&#13;
					operation {set_field {&#13;
							field_name = "chassis_type"&#13;
							value = eval {"javascript:var rtrn = \"\";
    var chassisType = ${Win32_SystemEnclosure[1].ChassisTypes};
    var types = [\"Other\", \"Unknown\", \"Desktop\", \"Low Profile Desktop\", \"Pizza Box\", 
                     \"Mini Tower\", \"Tower\", \"Portable\", \"Laptop\", \"Notebook\", \"Hand Held\", 
                     \"Docking Station\", \"All in One\", \"Sub Notebook\", \"Space-Saving\", 
                     \"Lunch Box\", \"Main System Chassis\", \"Expansion Chassis\", \"SubChassis\", 
                     \"Bus Expansion Chassis\", \"Peripheral Chassis\", \"Storage Chassis\", 
                     \"Rack Mount Chassis\", \"Sealed-Case PC\"];
    rtrn = types[chassisType-1] || null;
"}&#13;
						}}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Trim cmdb_serial_number Table"&#13;
			transform {&#13;
				src_table_name = "cmdb_serial_number"&#13;
				target_table_name = "cmdb_serial_number"&#13;
				operation {set_field {&#13;
						field_name = "serial_number"&#13;
						value = eval {"javascript: var rtn = \"\";
var sn = \"\";

if (${cmdb_serial_number} &amp;&amp; ${cmdb_serial_number[].serial_number})
	sn  = ${cmdb_serial_number[].serial_number}.trim();
rtn = sn;"}&#13;
					}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Insert serial number to cmdb_ci_win_server"&#13;
			comment = "Set serial number to main CI"&#13;
			transform {&#13;
				src_table_name = "cmdb_ci_win_server"&#13;
				target_table_name = "cmdb_ci_win_server"&#13;
				operation {set_field {&#13;
						field_name = "serial_number"&#13;
						value = get_attr {"cmdb_serial_number[1].serial_number"}&#13;
					}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference between serial number to windows server"&#13;
			comment = ""&#13;
			relation_reference {&#13;
				table1_name = "cmdb_serial_number"&#13;
				table2_name = "cmdb_ci_win_server"&#13;
				result_table_name = "serial_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				ref_direction = parentToChild&#13;
				ref_field_name = "non_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - OS Information"&#13;
			ref {refid = "554ec5589fbc32001d753758442e70ba"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - CPU And Memory"&#13;
			ref {refid = "189e4d589fbc32001d753758442e7057"}&#13;
		}&#13;
		step {&#13;
			name = "Insert System, OS and CPU data to cmdb_ci_win_server"&#13;
			comment = "Add System, OS and CPU address width to main CI
cpu_core_count calculated using Win32_Processor.NumberOfCores
cpu_core_thread is calculated using Win32_Processor.NumberOfLogicalProcessors &amp; Win32_Processor.NumberOfCores
fqnd calculated using computer_system.primaryHostname &amp; TcpIpParameters.Domain
cpu_count calculated using Win32_Processor"&#13;
			transform {&#13;
				src_table_name = "cmdb_ci_win_server"&#13;
				target_table_name = "cmdb_ci_win_server"&#13;
				operation {&#13;
					set_field {&#13;
						field_name = "os_version"&#13;
						value = get_attr {"osInfo[1].Version"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os_service_pack"&#13;
						value = get_attr {"osInfo[1].CSDVersion"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "manufacturer"&#13;
						value = get_attr {"computerInfo[1].Manufacturer"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "model_id"&#13;
						value = get_attr {"computerInfo[1].Model"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "short_description"&#13;
						value = get_attr {"osInfo[1].Description"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os_address_width"&#13;
						value = get_attr {"osAddressWidth[1].AddressWidth"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "assigned_to"&#13;
						value = get_attr {"computerInfo[1].UserName"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_name"&#13;
						value = get_attr {"Win32_Processor[1].Name"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_speed"&#13;
						value = get_attr {"Win32_Processor[1].MaxClockSpeed"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_type"&#13;
						value = get_attr {"Win32_Processor[1].Manufacturer"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_core_count"&#13;
						value = eval {"javascript:var rtrn = '';rtrn = (${Win32_Processor.NumberOfCores})&gt;0?${Win32_Processor.NumberOfCores}:\"\";"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_core_thread"&#13;
						value = eval {"javascript:var rtrn = 0;if (JSUtil.notNil(${Win32_Processor.NumberOfCores}) &amp;&amp; (${Win32_Processor.NumberOfCores} &gt; 0)){ rtrn = (${Win32_Processor.NumberOfLogicalProcessors})/(${Win32_Processor.NumberOfCores});}"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "ip_address"&#13;
						value = get_attr {"computer_system.managementIP"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "host_name"&#13;
						value = get_attr {"newHostname"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "fqdn"&#13;
						value = get_attr {"fqdn"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os_domain"&#13;
						value = get_attr {"domainName"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "name"&#13;
						value = get_attr {"formattedHostname"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "cpu_count"&#13;
						value = eval {"javascript:var rtrn = '';var processorsTable = ${Win32_Processor};rtrn = (processorsTable)?processorsTable.size():\"\";"}&#13;
					}&#13;
					set_field {&#13;
						field_name = "os"&#13;
						value = get_attr {"computer_system.osName"}&#13;
					}&#13;
				}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Insert ram to cmdb_ci_win_server"&#13;
			comment = "Sum all memory modules to calculate total RAM"&#13;
			if {&#13;
				condition = is_not_empty {get_attr {"Win32_PhysicalMemory[*].Capacity"}}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].ram"&#13;
					concat {eval {"javascript:
var rtrn = '';
var totalRam = 0;
var modulesCapacities = ${Win32_PhysicalMemory[*].Capacity};
 for (var i=0; i &lt; modulesCapacities.size(); i++) {
   totalRam += modulesCapacities.get(i) / (1048576);
 }
rtrn = totalRam;
"}}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_memory_module and cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_memory_module"&#13;
				result_table_name = "memory_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - ARP and NDP Tables"&#13;
			ref {refid = "b8abaeb41b205910a63bdc61ab4bcb14"}&#13;
		}&#13;
		step {&#13;
			name = "Reference between discovery_net_arp_table to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "discovery_net_arp_table"&#13;
				table2_name = "cmdb_ci_win_server"&#13;
				result_table_name = "arp_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				ref_direction = parentToChild&#13;
				ref_field_name = "non_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Printers"&#13;
			ref {refid = "4ff41edadbc12200c06776231f9619dd"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Cluster"&#13;
			ref {refid = "c03a461adbc12200c06776231f961900"}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_win_cluster_node to cmdb_ci_win_server"&#13;
			comment = "Match each node to the main CI by name"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"isNode"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"shouldRunClusterOnOsType"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = relation_reference {&#13;
					table1_name = "cmdb_ci_win_cluster_node"&#13;
					table2_name = "cmdb_ci_win_server"&#13;
					result_table_name = "cluster_node_win_server"&#13;
					unmatched_lines = remove&#13;
					condition = any {&#13;
						eq {&#13;
							get_attr {"cmdb_ci_win_cluster_node[].name"}&#13;
							get_attr {"cmdb_ci_win_server[].host_name"}&#13;
						}&#13;
						eq {&#13;
							get_attr {"cmdb_ci_win_cluster_node[].name"}&#13;
							get_attr {"cmdb_ci_win_server[].name"}&#13;
						}&#13;
					}&#13;
					relation_type = "Hosted on::Hosts"&#13;
					ref_direction = parentToChild&#13;
					ref_field_name = "server"&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Relation between cmdb_ci_win_cluster to cmdb_ci_win_server"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"isNode"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"shouldRunClusterOnOsType"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = relation_reference {&#13;
					table1_name = "cmdb_ci_win_cluster"&#13;
					table2_name = "cmdb_ci_win_server"&#13;
					result_table_name = "cluster_win_server"&#13;
					unmatched_lines = remove&#13;
					condition = is_not_empty {get_attr {"cmdb_ci_win_cluster[].PartComponent"}}&#13;
					relation_type = "Hosted on::Hosts"&#13;
					ref_direction = parentToChild&#13;
					ref_field_name = ""&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Network"&#13;
			ref {refid = "7dc49adadbc12200c06776231f96197d"}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between dscy_router_interface to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "dscy_router_interface"&#13;
				result_table_name = "router_interface_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Uses::Used by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between dscy_route_interface to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "dscy_route_interface"&#13;
				result_table_name = "route_interface_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Uses::Used by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between dscy_route_next_hop to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "dscy_route_next_hop"&#13;
				result_table_name = "gateway_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Uses::Used by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_network_adapter to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_network_adapter"&#13;
				result_table_name = "network_adapter_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "cmdb_ci"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Relation between cmdb_ci_ip_address to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_ip_address"&#13;
				result_table_name = "ip_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = contains {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = parentToChild&#13;
				ref_field_name = ""&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Set server's default gateway"&#13;
			comment = "Find the first NIC with default route, and set this route in the main CI"&#13;
			transform {&#13;
				src_table_name = "cmdb_ci_win_server"&#13;
				target_table_name = "cmdb_ci_win_server"&#13;
				operation {set_field {&#13;
						field_name = "default_gateway"&#13;
						value = concat {eval {"javascript:
var rtrn = '';
var networkAdaptersTable = ${ValidNetworkAdapters};
var networkAdapter;
var networkAdapterGateway;
if(networkAdaptersTable){
for(var i = 0; i &lt; networkAdaptersTable.size(); i++)
{
networkAdapter = networkAdaptersTable.get(i);
networkAdapterGateway = networkAdapter.get(\"DefaultIPGateway\");
if(networkAdapterGateway)
{
rtrn = networkAdapterGateway;
break;
}
}
}
"}}&#13;
					}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "DNS"&#13;
			ref {refid = "ede27fe5db652200868a7c841f961984"}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Storage"&#13;
			ref {refid = "87e5921edbc12200c06776231f96190a"}&#13;
		}&#13;
		step {&#13;
			name = "Insert total disk space of the server"&#13;
			comment = "Sum all disks size for total disk space"&#13;
			set_attr {&#13;
				"cmdb_ci_win_server[*].disk_space"&#13;
				concat {eval {"javascript:
var rtrn = '';
var disksSizeColumn = ${PhysicalDisks[*].Size};
//disksSize = disksSize + \"\";
//disksSize = JSON.parse(disksSize);
//var total = 0;
var totalDiskSize = 0;
//if (disksSize instanceof Array) {
 //for (var i=0; i &lt; disksSize.length; i++) {
for (var i=0; i &lt; disksSizeColumn.size(); i++) {
   //total += disksSize[i];
totalDiskSize += disksSizeColumn.get(i) / (1073741824);
 }
//}
//rtrn = (total / (1073741824)) | 0;
//rtrn = (totalDiskSize / (1073741824)) | 0;
rtrn = totalDiskSize;
"}}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_disk to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_disk"&#13;
				result_table_name = "disk_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_storage_device to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_storage_device"&#13;
				result_table_name = "storage_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_fc_disk to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_fc_disk"&#13;
				result_table_name = "fc_disk_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_iscsi_disk to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_iscsi_disk"&#13;
				result_table_name = "iscsi_disk_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_disk_partition to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_disk_partition"&#13;
				result_table_name = "partition_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_storage_hba and cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_storage_hba"&#13;
				result_table_name = "hba_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_fc_port to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_fc_port"&#13;
				result_table_name = "fc_port_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Owns::Owned by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_nas_file_system to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_nas_file_system"&#13;
				result_table_name = "nas_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_file_system to cmdb_ci_win_server"&#13;
			relation_reference {&#13;
				table1_name = "cmdb_ci_win_server"&#13;
				table2_name = "cmdb_ci_file_system"&#13;
				result_table_name = "file_system_win_server"&#13;
				unmatched_lines = remove&#13;
				condition = eq {&#13;
					"1"&#13;
					"1"&#13;
				}&#13;
				relation_type = "Contains::Contained by"&#13;
				ref_direction = childToParent&#13;
				ref_field_name = "computer"&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Insert data to cmdb_ci_hyper_v_server"&#13;
			comment = "NameForCluster used for matching hyper-v cluster"&#13;
			if {&#13;
				condition = eq {&#13;
					get_attr {"isHyperV"}&#13;
					"true"&#13;
				}&#13;
				on_true = transform {&#13;
					src_table_name = "cmdb_ci_win_server"&#13;
					target_table_name = "cmdb_ci_hyper_v_server"&#13;
					operation {&#13;
						set_field {&#13;
							field_name = "name"&#13;
							value = concat {&#13;
								get_attr {"cmdb_ci_win_server[].name"}&#13;
								"@Hyper-V Server"&#13;
							}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os_service_pack"&#13;
							value = get_attr {"cmdb_ci_win_server[].os_service_pack"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "manufacturer"&#13;
							value = get_attr {"cmdb_ci_win_server[].manufacturer"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "model_id"&#13;
							value = get_attr {"cmdb_ci_win_server[].model_id"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "short_description"&#13;
							value = get_attr {"cmdb_ci_win_server[].short_description"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os_address_width"&#13;
							value = get_attr {"cmdb_ci_win_server[].os_address_width"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os"&#13;
							value = get_attr {"cmdb_ci_win_server[].os"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "host_name"&#13;
							value = get_attr {"cmdb_ci_win_server[].host_name"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "ip_address"&#13;
							value = get_attr {"cmdb_ci_win_server[].ip_address"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "chassis_type"&#13;
							value = get_attr {"cmdb_ci_win_server[].chassis_type"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "os_version"&#13;
							value = get_attr {"cmdb_ci_win_server[].os_version"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "assigned_to"&#13;
							value = get_attr {"cmdb_ci_win_server[].assigned_to"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "virtual"&#13;
							value = "true"&#13;
						}&#13;
						set_field {&#13;
							field_name = "NameForCluster"&#13;
							value = get_attr {"cmdb_ci_win_server[1].name"}&#13;
						}&#13;
						set_field {&#13;
							field_name = "serial_number"&#13;
							value = concat {&#13;
								get_attr {"cmdb_ci_win_server[1].serial_number"}&#13;
								"_hyper_v_server"&#13;
							}&#13;
						}&#13;
					}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Hyper-V"&#13;
			ref {refid = "4386161edbc12200c06776231f961939"}&#13;
		}&#13;
		step {&#13;
			name = "Reference and relation between cmdb_ci_hyper_v_server and cmdb_ci_win_server"&#13;
			if {&#13;
				condition = eq {&#13;
					get_attr {"isHyperV"}&#13;
					"true"&#13;
				}&#13;
				on_true = relation_reference {&#13;
					table1_name = "cmdb_ci_hyper_v_server"&#13;
					table2_name = "cmdb_ci_win_server"&#13;
					result_table_name = "hyper_v_win_server"&#13;
					unmatched_lines = remove&#13;
					condition = eq {&#13;
						"1"&#13;
						"1"&#13;
					}&#13;
					relation_type = "Runs on::Runs"&#13;
					ref_direction = parentToChild&#13;
					ref_field_name = "windows_host"&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "Windows - Cloud"&#13;
			ref {refid = "b65be7cedb093200c12ef9361d9619f3"}&#13;
		}&#13;
		step {&#13;
			name = "If AWS, set AWS object_id on host"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"shouldDiscoverAmazon"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"isEc2"}&#13;
						"true"&#13;
					}&#13;
					is_not_empty {get_attr {"awsData[*].instance_id"}}&#13;
				}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].object_id"&#13;
					get_attr {"awsData[1].instance_id"}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "If Azure, set Azure object_id on host"&#13;
			if {&#13;
				condition = all {&#13;
					eq {&#13;
						get_attr {"isAzure"}&#13;
						"true"&#13;
					}&#13;
					is_not_empty {get_attr {"uuidSerial"}}&#13;
					eq {&#13;
						get_attr {"shouldDiscoverAzure"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].object_id"&#13;
					get_attr {"uuidSerial"}&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
		step {&#13;
			name = "If host discovered by cloud discovery, set it as virtual"&#13;
			if {&#13;
				condition = any {&#13;
					eq {&#13;
						get_attr {"isAzure"}&#13;
						"true"&#13;
					}&#13;
					eq {&#13;
						get_attr {"isEc2"}&#13;
						"true"&#13;
					}&#13;
				}&#13;
				on_true = set_attr {&#13;
					"cmdb_ci_win_server[*].virtual"&#13;
					"true"&#13;
				}&#13;
				on_false = nop {}&#13;
			}&#13;
		}&#13;
	}&#13;
}&#13;
</ndl><parent/><serverless>false</serverless><source/><sys_class_name>sa_pattern</sys_class_name><sys_created_by>admin</sys_created_by><sys_created_on>2024-07-02 11:49:13</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>b9d950d3478382548266565a516d4353</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Windows OS - Servers Ondrej</sys_name><sys_overrides/><sys_package display_value="Discovery Patterns for Pipeline" source="8bd79e28470b8ad08266565a516d43c2">8bd79e28470b8ad08266565a516d43c2</sys_package><sys_policy/><sys_replace display_value="Windows OS - Servers">670e55a4db702200c06776231f961942</sys_replace><sys_scope display_value="Discovery Patterns for Pipeline">8bd79e28470b8ad08266565a516d43c2</sys_scope><sys_update_name>sa_pattern_b9d950d3478382548266565a516d4353</sys_update_name><sys_updated_by>admin</sys_updated_by><sys_updated_on>2024-07-02 11:53:04</sys_updated_on><version/></sa_pattern></record_update>]]></payload>
        <payload_hash>472992207</payload_hash>
        <record_name>Windows OS - Servers Ondrej</record_name>
        <reverted_from/>
        <source>d2ff0b4f478742548266565a516d43a2</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-02 11:53:04</sys_created_on>
        <sys_id>1aba5857478382548266565a516d432c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>190734a8dd10000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-02 11:53:04</sys_updated_on>
        <type>Discovery Patterns</type>
        <update_guid>9eba585765838254c03690dde5b4d62b</update_guid>
        <update_guid_history>9eba585765838254c03690dde5b4d62b:472992207,c6d950d3be838254799c3403a0b02956:1020587190</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Windows OS - Servers Ondrej">035ba05f470782548266565a516d43ed</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-02 13:05:46</sys_created_on>
        <sys_db_object display_value="" name="sa_pattern">sa_pattern</sys_db_object>
        <sys_id>5cba6c93086840b4aa0214f1d06fbc04</sys_id>
        <sys_metadata>b9d950d3478382548266565a516d4353</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Windows OS - Servers Ondrej</sys_name>
        <sys_package display_value="Discovery Patterns for Pipeline" source="8bd79e28470b8ad08266565a516d43c2">8bd79e28470b8ad08266565a516d43c2</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Discovery Patterns for Pipeline">8bd79e28470b8ad08266565a516d43c2</sys_scope>
        <sys_scope_delete display_value="">2fb7c74e3bed4ce094298b38fb8e7d10</sys_scope_delete>
        <sys_update_name>sa_pattern_b9d950d3478382548266565a516d4353</sys_update_name>
        <sys_update_version display_value="sa_pattern_b9d950d3478382548266565a516d4353">1aba5857478382548266565a516d432c</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-07-02 13:05:46</sys_updated_on>
    </sys_metadata_delete>
</record_update>
